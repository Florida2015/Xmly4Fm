package com.yushilei.xmly4fm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yushilei.xmly4fm.entities.SpecialEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPECIAL_ENTITY".
*/
public class SpecialEntityDao extends AbstractDao<SpecialEntity, Long> {

    public static final String TABLENAME = "SPECIAL_ENTITY";

    /**
     * Properties of entity SpecialEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SpecialId = new Property(0, Long.class, "specialId", true, "SPECIAL_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property ColumnType = new Property(2, Integer.class, "columnType", false, "COLUMN_TYPE");
        public final static Property Subtitle = new Property(3, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Footnote = new Property(4, String.class, "footnote", false, "FOOTNOTE");
        public final static Property CoverPath = new Property(5, String.class, "coverPath", false, "COVER_PATH");
        public final static Property ContentType = new Property(6, Integer.class, "contentType", false, "CONTENT_TYPE");
        public final static Property Nickname = new Property(7, String.class, "nickname", false, "NICKNAME");
        public final static Property SmallLogo = new Property(8, String.class, "smallLogo", false, "SMALL_LOGO");
        public final static Property Uid = new Property(9, Long.class, "uid", false, "UID");
        public final static Property Intro = new Property(10, String.class, "intro", false, "INTRO");
        public final static Property CoverPathBig = new Property(11, String.class, "coverPathBig", false, "COVER_PATH_BIG");
        public final static Property PersonalSignature = new Property(12, String.class, "personalSignature", false, "PERSONAL_SIGNATURE");
    };


    public SpecialEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SpecialEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPECIAL_ENTITY\" (" + //
                "\"SPECIAL_ID\" INTEGER PRIMARY KEY ," + // 0: specialId
                "\"TITLE\" TEXT," + // 1: title
                "\"COLUMN_TYPE\" INTEGER," + // 2: columnType
                "\"SUBTITLE\" TEXT," + // 3: subtitle
                "\"FOOTNOTE\" TEXT," + // 4: footnote
                "\"COVER_PATH\" TEXT," + // 5: coverPath
                "\"CONTENT_TYPE\" INTEGER," + // 6: contentType
                "\"NICKNAME\" TEXT," + // 7: nickname
                "\"SMALL_LOGO\" TEXT," + // 8: smallLogo
                "\"UID\" INTEGER," + // 9: uid
                "\"INTRO\" TEXT," + // 10: intro
                "\"COVER_PATH_BIG\" TEXT," + // 11: coverPathBig
                "\"PERSONAL_SIGNATURE\" TEXT);"); // 12: personalSignature
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPECIAL_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SpecialEntity entity) {
        stmt.clearBindings();
 
        Long specialId = entity.getSpecialId();
        if (specialId != null) {
            stmt.bindLong(1, specialId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Integer columnType = entity.getColumnType();
        if (columnType != null) {
            stmt.bindLong(3, columnType);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(4, subtitle);
        }
 
        String footnote = entity.getFootnote();
        if (footnote != null) {
            stmt.bindString(5, footnote);
        }
 
        String coverPath = entity.getCoverPath();
        if (coverPath != null) {
            stmt.bindString(6, coverPath);
        }
 
        Integer contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindLong(7, contentType);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(8, nickname);
        }
 
        String smallLogo = entity.getSmallLogo();
        if (smallLogo != null) {
            stmt.bindString(9, smallLogo);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(10, uid);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(11, intro);
        }
 
        String coverPathBig = entity.getCoverPathBig();
        if (coverPathBig != null) {
            stmt.bindString(12, coverPathBig);
        }
 
        String personalSignature = entity.getPersonalSignature();
        if (personalSignature != null) {
            stmt.bindString(13, personalSignature);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SpecialEntity readEntity(Cursor cursor, int offset) {
        SpecialEntity entity = new SpecialEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // specialId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // columnType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subtitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // footnote
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // coverPath
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // contentType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // smallLogo
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // uid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // intro
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // coverPathBig
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // personalSignature
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SpecialEntity entity, int offset) {
        entity.setSpecialId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setColumnType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSubtitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFootnote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCoverPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContentType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setNickname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSmallLogo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUid(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setIntro(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCoverPathBig(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPersonalSignature(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SpecialEntity entity, long rowId) {
        entity.setSpecialId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SpecialEntity entity) {
        if(entity != null) {
            return entity.getSpecialId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
